     1                                  global start
     2                                  section .data
     3 00000000 456E74657220796F75-     msg: db "Enter your number:", 10
     4 00000009 72206E756D6265723A-
     5 00000012 0A                 
     6                                  len: equ $-msg
     7                                  section .bss
     8 00000000 <res 0000000A>          str1: resb 10 
     9                                  section .text
    10                                  start:
    11 00000000 6813000000              	push	dword len	;Length of message
    12 00000005 68[00000000]            	push	dword msg	;Message to write
    13 0000000A 6801000000              	push	dword 1		;STDOUT
    14 0000000F B804000000              	mov 	eax,4		;We are writing
    15 00000014 680A000000              	push 	10		;Making space on the stack??	
    16 00000019 CD80                    	int 	0x80		;SYSCALL
    17 0000001B 81C410000000            	add 	esp,16		;Move back
    18                                  	
    19 00000021 680A000000              	push 	dword 10	;length of message (10)
    20 00000026 68[00000000]            	push	dword str1	;Place to put it
    21 0000002B 6800000000              	push 	dword 0		;STDIN 0. Not 3.
    22 00000030 B803000000              	mov 	eax,3		;We are reading
    23 00000035 81EC04000000            	sub	esp,4		;push	eax
    24 0000003B CD80                    	int 	0x80
    25 0000003D 81C410000000            	add	esp,16
    26                                  	
    27 00000043 BB[00000000]            	mov	ebx, str1	;Move it around
    28 00000048 680A000000              	push	dword 10	;Printing 10
    29 0000004D 53                      	push	dword ebx	;Hopefully putting the string back on the stack?
    30 0000004E 6801000000              	push	dword 1		;STDOUT
    31 00000053 B804000000              	mov	eax,4
    32 00000058 81EC04000000            	sub	esp,4		
    33 0000005E CD80                    	int 	0x80
    34                                  
    35                                  	;Okay now we have ASCII characters. 
    36                                  	;I would like to write a function to print out the value on the stack as a binary number, just to see it.
    37 00000060 53                      	push ebx
    38 00000061 E805000000              	call printBinary
    39 00000066 E80B000000              	call end
    40                                  
    41                                  printBinary:
    42 0000006B 55                      	push	ebp
    43 0000006C 89E5                    	mov	ebp, esp
    44 0000006E 8B742408                	mov 	esi, [esp+8]
    45                                  		
    46                                  	
    47                                  
    48 00000072 89EC                    	mov	esp, ebp
    49 00000074 5D                      	pop 	ebp
    50 00000075 C3                      	ret
    51                                  end:
    52 00000076 81C410000000            	add 	esp,16		;Move back
    53 0000007C 6800000000              	push 	dword 0		;Exit code
    54 00000081 B801000000              	mov 	eax,1		;Exit command
    55 00000086 81EC0C000000            	sub	esp,12		;Back up
    56 0000008C CD80                    	int 	0x80		;SYSCALL	

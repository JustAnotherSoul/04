     1                                  global printBinary 		;This is our 'main' thing, we are exporting this
     2                                  section .data
     3 00000000 30                      zero: db "0"
     4                                  len: equ $-zero
     5 00000001 31                      one: db "1"
     6                                  section .text
     7                                  printBinary:
     8 00000000 55                      	push	ebp 		;Push so we can go back
     9 00000001 89E5                    	mov	ebp,esp		;Alright, now we're aligning everything
    10 00000003 8B542408                	mov 	edx,[esp+8]	;Our parameter is here!
    11                                  ;	mov 	edx,0xABCDEF23	;Dummy parameter for test
    12                                  	;Something like this: xor with 10000000 repeatedly to assemble the number: bitmask. 0b1000 0000 0000 0000 = 0x8000 (32 bits though so four more zeros)
    13                                  	;False: AND with 0x80000000 to determine which to print 0 or 1. 
    14 00000007 B901000000              	mov 	ecx,0x1		;To keep track of how many times this has been done 
    15                                  my_loop:
    16 0000000C 81F900000000            	cmp 	ecx,0		;If it rotates through all the bits we're done
    17 00000012 7466                    	je 	done_label	;Go to done
    18 00000014 52                      	push 	edx		;Push the thing we have
    19 00000015 81E200000080            	and 	edx,0x80000000	;Should be 0 or 1 now.
    20 0000001B 81FA00000000            	cmp 	edx,0
    21 00000021 7405                    	je 	print_zero	;Ah, good, we print zero
    22 00000023 E929000000              	jmp 	print_one	;Oh, okay, print one (explicit in case a later change shuffles the order)
    23                                  print_zero:
    24 00000028 6801000000              	push 	dword len	;length
    25 0000002D 68[00000000]            	push 	zero		;Character (zero in this case)
    26 00000032 6801000000              	push	dword 1		;stdout
    27 00000037 B804000000              	mov 	eax,4		;print opcode
    28 0000003C 81EC04000000            	sub 	esp,4		;Make space per BSD calling convention
    29 00000042 CD80                    	int 	0x80		;SYSCALL
    30 00000044 81C410000000            	add 	esp,16		;Functionally pop
    31 0000004A 5A                      	pop 	edx
    32 0000004B D1E1                    	shl 	ecx,1		;Move to next bit and loop
    33 0000004D D1E2                    	shl	edx,1
    34 0000004F EBBB                    	jmp 	my_loop		;Keep going
    35                                  print_one:	 
    36 00000051 6801000000              	push 	dword len	;length
    37 00000056 68[01000000]            	push 	one		;Character (one in this case)
    38 0000005B 6801000000              	push 	dword 1		;stdout
    39 00000060 B804000000              	mov 	eax,4		;print opcode
    40 00000065 81EC04000000            	sub 	esp,4		;Make space per BSD calling convention
    41 0000006B CD80                    	int 	0x80		;SYSCALL
    42 0000006D 81C410000000            	add 	esp,16		;Functionally pop
    43 00000073 5A                      	pop 	edx
    44 00000074 D1E1                    	shl 	ecx,1		;Move to the next bit
    45 00000076 D1E2                    	shl 	edx,1
    46 00000078 EB92                    	jmp 	my_loop		;and loop
    47                                  done_label:
    48                                  	;All done!
    49                                  
    50 0000007A 89EC                    	mov	esp, ebp
    51 0000007C 5D                      	pop 	ebp
    52 0000007D C3                      	ret
    53                                  	;Return to caller
    54                                  
    55 0000007E 6800000000              	push 	dword 0
    56 00000083 B801000000              	mov	eax,1
    57 00000088 81EC0C000000            	sub	esp,12
    58 0000008E CD80                    	int 	0x80
